{"version":3,"sources":["firebase.js","components/Header.js","components/Footer.js","components/PlantForm.js","components/PlantPage.js","components/Tile.js","components/TilesContainer.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Header","state","className","Component","Footer","href","PlantForm","props","action","htmlFor","type","name","id","onChange","handleChange","value","plantName","plantNotes","onClick","event","preventDefault","match","handleSubmit","alert","PlantPage","plant","handleEdit","handleDelete","Tile","clickHandler","TilesContainer","plants","length","console","log","map","key","ReactModal","setAppElement","App","setState","target","startNewEntry","modalActive","modalType","submitNewEntry","database","ref","push","inputName","inputNotes","closeModal","displayPlant","currentPlant","deletePlant","child","remove","displayEditForm","submitEditedEntry","update","getModalContent","on","response","newState","data","val","isOpen","this","onRequestClose","overlayClassName","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8RAcEA,IAASC,cAXY,CACnBC,OAAQ,0CACRC,WAAY,gCACZC,YAAa,uCACbC,UAAW,gBACXC,cAAe,4BACfC,kBAAmB,eACnBC,MAAO,8CAMMR,QAAf,E,iBCIaS,G,kNAjBXC,MAAQ,G,uDAEJ,OACI,4BAAQC,UAAU,WACd,uCACA,2T,GANKC,cCcNC,E,4MAbXH,MAAQ,G,uDAEJ,OACI,4BAAQC,UAAU,WACd,2BACI,yCAAc,uBAAGG,KAAK,oCAAR,gBAAd,KACA,oCAAS,uBAAGA,KAAK,+BAAR,gBAAT,mB,GAPCF,aCyBNG,EAzBG,SAACC,GACf,OACI,0BAAMC,OAAO,UACT,2BAAOC,QAAQ,aAAf,eACA,2BAAOC,KAAK,OAAOC,KAAK,YAAYC,GAAG,YAAYC,SAAUN,EAAMO,aAAcC,MAAOR,EAAMS,YAE9F,2BAAOP,QAAQ,cAAf,gBACA,8BAAUE,KAAK,aAAaC,GAAG,aAAaC,SAAUN,EAAMO,aAAcC,MAAOR,EAAMU,aAGvF,4BAAQP,KAAK,SAASR,UAAU,2BAA2BgB,QAAS,SAACC,GAEjEA,EAAMC,iBAGFb,EAAMS,UAAUK,MAAM,mBACtBd,EAAMe,eAENC,MAAM,+EAEX,wCCCAC,EArBG,SAACjB,GAAW,IAAD,EACOA,EAAMkB,MAA/BT,EADkB,EAClBA,UAAWC,EADO,EACPA,WAClB,OACI,6BAASf,UAAU,aACf,4BAAKc,GACL,2BAAIC,GAEJ,yBAAKf,UAAU,oBACX,4BAAQgB,QAASX,EAAMmB,WAAYxB,UAAU,4BAA7C,mBAIA,4BAAQgB,QAASX,EAAMoB,aAAczB,UAAU,4BAA/C,wBCHD0B,EATF,SAACrB,GAEV,OACI,4BAAQW,QAASX,EAAMsB,aAAc3B,UAAU,iCAC3C,2BAAIK,EAAMS,aCuBPc,EA1BQ,SAACvB,GAAW,IACvBwB,EAAyBxB,EAAzBwB,OAAQF,EAAiBtB,EAAjBsB,aAChB,OAAsB,IAAlBE,EAAOC,QACPC,QAAQC,IAAI,gBAER,uBAAGhC,UAAU,eAAb,6EAMA,yBAAKA,UAAU,kBACV6B,EAAOI,KAAI,SAACV,GACT,OACI,kBAAC,EAAD,CACIW,IAAKX,EAAMW,IACXpB,UAAWS,EAAMT,UACjBa,aAAc,kBAAMA,EAAaJ,WCP7DY,IAAWC,cAAc,S,IA4NVC,E,kDAzNb,aAAe,IAAD,8BACZ,gBAuCFzB,aAAe,SAACK,GACd,EAAKqB,SAAL,eACGrB,EAAMsB,OAAO7B,GAAKO,EAAMsB,OAAO1B,SA1CtB,EA+Cd2B,cAAgB,SAACjB,GACf,EAAKe,SAAS,CACZG,aAAa,EACbC,UAAW,cAlDD,EAuDdC,eAAiB,WAEDtD,EAASuD,WAAWC,MAC5BC,KAAK,CACThC,UAAW,EAAKf,MAAMgD,UACtBhC,WAAY,EAAKhB,MAAMiD,aAIzB,EAAKC,cAhEO,EAoEdC,aAAe,SAAC3B,GACd,EAAKe,SAAS,CACZa,aAAc5B,EACdmB,UAAW,YACXD,aAAa,KAxEH,EA6EdW,YAAc,SAAClB,GAEC7C,EAASuD,WAAWC,MAC5BQ,MAAMnB,GAAKoB,SAGjB,EAAKL,cAnFO,EAuFdM,gBAAkB,SAAChC,GACjB,EAAKe,SAAS,CACZI,UAAW,YACXK,UAAW,EAAKhD,MAAMoD,aAAarC,UACnCkC,WAAY,EAAKjD,MAAMoD,aAAapC,cA3F1B,EAgGdyC,kBAAoB,SAACtB,GAEL7C,EAASuD,WAAWC,MAC5BQ,MAAMnB,GAAKuB,OAAO,CACtB3C,UAAW,EAAKf,MAAMgD,UACtBhC,WAAY,EAAKhB,MAAMiD,aAIzB,EAAKV,SAAS,CAEZa,aAAc,CACZjB,IAAKA,EACLpB,UAAW,EAAKf,MAAMgD,UACtBhC,WAAY,EAAKhB,MAAMiD,YAIzBN,UAAW,YACXK,UAAW,GACXC,WAAY,MApHF,EAyHdC,WAAa,WACX,EAAKX,SAAS,CACZG,aAAa,EACbC,UAAW,GACXS,aAAc,CACZrC,UAAW,GACXC,WAAY,GACZmB,IAAK,IAEPa,UAAW,GACXC,WAAY,MAnIF,EAwIdU,gBAAkB,WAAO,IACfhB,EAAc,EAAK3C,MAAnB2C,UACR,GAAkB,aAAdA,EAEF,OACE,kBAAC,EAAD,CACE9B,aAAc,EAAKA,aACnBQ,aAAc,EAAKuB,eACnB7B,UAAW,EAAKf,MAAMgD,UACtBhC,WAAY,EAAKhB,MAAMiD,aAGtB,GAAkB,cAAdN,EAA2B,KAE5BR,EAAQ,EAAKnC,MAAMoD,aAAnBjB,IACR,OACE,kBAAC,EAAD,CACEtB,aAAc,EAAKA,aACnBQ,aAAc,kBAAM,EAAKoC,kBAAkBtB,IAC3CpB,UAAW,EAAKf,MAAMgD,UACtBhC,WAAY,EAAKhB,MAAMiD,aAGtB,GAAkB,cAAdN,EAA2B,KAE5BS,EAAiB,EAAKpD,MAAtBoD,aACR,OACE,kBAAC,EAAD,CACE5B,MAAO4B,EACP1B,aAAc,kBAAM,EAAK2B,YAAYD,EAAajB,MAClDV,WAAY,kBAAM,EAAK+B,gBAAgBJ,QApK7C,EAAKpD,MAAQ,CACX0C,aAAa,EACbC,UAAW,GACXS,aAAc,CACZrC,UAAW,GACXC,WAAY,GACZmB,IAAK,IAEPa,UAAW,GACXC,WAAY,GACZnB,OAAQ,IAZE,E,gEAgBO,IAAD,OAEJxC,EAASuD,WAAWC,MAC5Bc,GAAG,SAAS,SAACC,GACjB,IAAMC,EAAW,GACXC,EAAOF,EAASG,MAGtB,IAAK,IAAM7B,KAAO4B,EAChBD,EAASf,KAAK,CACZZ,IAAKA,EACLpB,UAAWgD,EAAK5B,GAAKpB,UACrBC,WAAY+C,EAAK5B,GAAKnB,aAK1B,EAAKuB,SAAS,CACZT,OAAQgC,S,+BA2IZ,OACE,yBAAK7D,UAAU,OAEb,kBAAC,IAAD,CACEgE,OAAQC,KAAKlE,MAAM0C,YACnByB,eAAgBD,KAAKhB,WACrBjD,UAAU,QACVmE,iBAAiB,WAIjB,4BAAQnD,QAASiD,KAAKhB,WAAYjD,UAAU,eAC1C,uBAAGA,UAAU,yBAIdiE,KAAKP,mBAIR,kBAAC,EAAD,MAGA,8BACE,6BAAS1D,UAAU,sBACjB,+CAGA,kBAAC,EAAD,CAAgB6B,OAAQoC,KAAKlE,MAAM8B,OAAQF,aAAcsC,KAAKf,eAG9D,4BAAQlD,UAAU,0CAA0CgB,QAASiD,KAAKzB,eAA1E,qBAOJ,kBAAC,EAAD,W,GApNUvC,aCHEmE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASpD,MACvB,2DCZNqD,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrD,QAAQqD,MAAMA,EAAMC,c","file":"static/js/main.3754a28f.chunk.js","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/database';\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyCy3hxKMNwgnOKiqNOJB3vT8wi_MS8C5NM\",\n    authDomain: \"sapling-5158c.firebaseapp.com\",\n    databaseURL: \"https://sapling-5158c.firebaseio.com\",\n    projectId: \"sapling-5158c\",\n    storageBucket: \"sapling-5158c.appspot.com\",\n    messagingSenderId: \"207824118415\",\n    appId: \"1:207824118415:web:f0fd5d741514e5d2f506fa\"\n  };\n\n  // Initialize Firebase\n  firebase.initializeApp(firebaseConfig);\n\n  export default firebase;\n","import React, { Component } from 'react';\n\nclass Header extends Component {\n    state = {  }\n    render() { \n        return (\n            <header className='wrapper'>\n                <h1>sapling</h1>\n                <p>\n                    Sapling is a simple plant journal that will help you keep tabs on your plant collection.\n                    Add a plant to Sapling and write any notes you find helpful:\n                    care instructions, where you bought it, or anything else.\n                    Your entries will appear in the area below this message.\n                    Happy growing!\n                </p>\n            </header>\n        );\n    }\n}\n \nexport default Header;","import React, { Component } from 'react';\n\nclass Footer extends Component {\n    state = {  }\n    render() { \n        return (\n            <footer className='wrapper'>\n                <p>\n                    <span>Made by <a href=\"https://www.github.com/epwallace\">Evan Wallace</a> </span>\n                    <span>at <a href=\"https://www.junocollege.com\">Juno College</a> in 2020.</span>\n                </p>\n            </footer>\n        );\n    }\n}\n \nexport default Footer;","import React from 'react';\n\nconst PlantForm = (props) => {\n    return(\n        <form action='submit'>\n            <label htmlFor='inputName'>plant name:</label>\n            <input type='text' name='inputName' id='inputName' onChange={props.handleChange} value={props.plantName} />\n\n            <label htmlFor='inputNotes'>plant notes:</label>\n            <textarea name='inputNotes' id='inputNotes' onChange={props.handleChange} value={props.plantNotes}></textarea>\n\n            {/* form submission button */}\n            <button type=\"button\" className='raisedButton greenButton' onClick={(event) => {\n                // prevent page refresh\n                event.preventDefault();\n\n                // only submit if plantName starts with a letter and is less than 30 chars\n                if (props.plantName.match('[a-zA-z].{0,29}')) {\n                    props.handleSubmit()\n                } else {\n                    alert(\"Your plant name must start with a letter and cannot exceed 30 characters.\");\n                }\n            }}><p>Submit</p></button>\n        </form>\n    )\n}\n\nexport default PlantForm;","import React from 'react';\n\nconst PlantPage = (props) => {\n    const {plantName, plantNotes} = props.plant;\n    return(\n        <section className=\"plantPage\">\n            <h3>{plantName}</h3>\n            <p>{plantNotes}</p>\n\n            <div className=\"buttonsContainer\">\n                <button onClick={props.handleEdit} className=\"raisedButton greenButton\">\n                    edit this plant\n                </button>\n\n                <button onClick={props.handleDelete} className=\"raisedButton greenButton\">\n                    delete this plant\n                </button>\n            </div>\n\n        </section>\n    )\n}\n\nexport default PlantPage;","import React from 'react';\n\nconst Tile = (props) => {\n\n    return(\n        <button onClick={props.clickHandler} className=\"tile raisedButton brownButton\">\n            <p>{props.plantName}</p>\n        </button>\n    )\n}\n\nexport default Tile;","import React from 'react';\nimport Tile from './Tile.js';\n\nconst TilesContainer = (props) => {\n    const { plants, clickHandler } = props;\n    if (plants.length === 0) {\n        console.log('nothing here');\n        return (\n            <p className=\"noPlantsMsg\">\n                You haven't added any plants yet! Click the button below to get started.\n            </p>\n        );\n    } else {\n        return(\n            <div className=\"tilesContainer\">\n                {plants.map((plant) => {\n                    return(\n                        <Tile\n                            key={plant.key}\n                            plantName={plant.plantName}\n                            clickHandler={() => clickHandler(plant)}\n                        />\n                    )\n                })}\n            </div>\n        );\n    }\n};      \n \nexport default TilesContainer;","import React, { Component } from 'react';\nimport firebase from './firebase.js';\nimport ReactModal from 'react-modal';\nimport './App.css';\n\n// layout components\nimport Header from './components/Header.js';\nimport Footer from './components/Footer.js';\nimport PlantForm from './components/PlantForm.js';\nimport PlantPage from './components/PlantPage.js';\nimport TilesContainer from './components/TilesContainer.js';\n\n// set root element so react-modal can apply aria-hidden properly\nReactModal.setAppElement('#root');\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      modalActive: false,\n      modalType: '',\n      currentPlant: {\n        plantName: '',\n        plantNotes: '',\n        key: '',\n      },\n      inputName: '',\n      inputNotes: '',\n      plants: [],\n    }\n  }\n\n  componentDidMount() {\n    // connect to firebase\n    const dbRef = firebase.database().ref();\n    dbRef.on('value', (response) => {\n      const newState = [];\n      const data = response.val();\n\n      // index plant information with firebase key\n      for (const key in data) {\n        newState.push({\n          key: key,\n          plantName: data[key].plantName,\n          plantNotes: data[key].plantNotes,\n        });\n      }\n\n      // pass firebase data to App state\n      this.setState({\n        plants: newState,\n      });\n    });\n  }\n\n  // update state as user types into form inputs\n  handleChange = (event) => {\n    this.setState ({\n      [event.target.id]: event.target.value,\n    });\n  };\n\n  // launches the new entry modal\n  startNewEntry = (plant) => {\n    this.setState({\n      modalActive: true,\n      modalType: 'newPlant'\n    })\n  }\n\n  // create a new entry in firebase when user submits a completed form\n  submitNewEntry = () => {\n    // connect to firebase and send user input\n    const dbRef = firebase.database().ref();\n    dbRef.push({\n      plantName: this.state.inputName,\n      plantNotes: this.state.inputNotes,\n    });\n\n    // reset state and close modal\n    this.closeModal();\n  };\n\n  // when a user clicks a tile, launch a modal with the relevant plant entry\n  displayPlant = (plant) => {\n    this.setState({\n      currentPlant: plant,\n      modalType: 'plantPage',\n      modalActive: true,\n    })\n  }\n\n  // remove a plant entry from the database\n  deletePlant = (key) => {\n    // connect to firebase and remove entry with provided key\n    const dbRef = firebase.database().ref();\n    dbRef.child(key).remove();\n\n    // reset state and close modal\n    this.closeModal();\n  }\n  \n  // launches the edit modal without resetting the currently selected plant\n  displayEditForm = (plant) => {\n    this.setState({\n      modalType: 'editPlant',\n      inputName: this.state.currentPlant.plantName,\n      inputNotes: this.state.currentPlant.plantNotes,\n    })\n  }\n\n  // send edited entry to firebase and reveal the updated plant page\n  submitEditedEntry = (key) => {\n    // connect to firebase and update the relevant entry\n    const dbRef = firebase.database().ref();\n    dbRef.child(key).update({\n      plantName: this.state.inputName,\n      plantNotes: this.state.inputNotes,\n    })\n\n    // restore plant page modal\n    this.setState({\n      // update currentPlant with the newest information\n      currentPlant: {\n        key: key,\n        plantName: this.state.inputName,\n        plantNotes: this.state.inputNotes,\n      },\n\n      // reset input fields and display updated plantPage\n      modalType: 'plantPage',\n      inputName: '',\n      inputNotes: '',\n    })\n  }\n\n  // close modal and restore any modified state attributes to default values\n  closeModal = () => {\n    this.setState({\n      modalActive: false,\n      modalType: '',\n      currentPlant: {\n        plantName: '',\n        plantNotes: '',\n        key: '',\n      },\n      inputName: '',\n      inputNotes: '',\n    })\n  }\n\n  // read this.state.modalType to determine what content should be returned\n  getModalContent = () => {\n    const { modalType } = this.state;\n    if (modalType === 'newPlant') {\n      // return a form whose submission pushes a new entry to firebase\n      return (\n        <PlantForm\n          handleChange={this.handleChange}\n          handleSubmit={this.submitNewEntry}\n          plantName={this.state.inputName}\n          plantNotes={this.state.inputNotes}\n        />\n      )\n    } else if (modalType === 'editPlant') {\n      // return a form whose submission modifies the firebase entry with this key\n      const { key } = this.state.currentPlant;\n      return (\n        <PlantForm\n          handleChange={this.handleChange}\n          handleSubmit={() => this.submitEditedEntry(key)}\n          plantName={this.state.inputName}\n          plantNotes={this.state.inputNotes}\n        />\n      )\n    } else if (modalType === 'plantPage') {\n      // return the expanded entry for the currently selected plant\n      const { currentPlant } = this.state;\n      return (\n        <PlantPage\n          plant={currentPlant}\n          handleDelete={() => this.deletePlant(currentPlant.key)}\n          handleEdit={() => this.displayEditForm(currentPlant)}\n        />\n      )\n    }\n  }\n\n  render() { \n    return (\n      <div className=\"App\">\n        {/* --- modal section --- */}\n        <ReactModal\n          isOpen={this.state.modalActive}\n          onRequestClose={this.closeModal}\n          className='modal'\n          overlayClassName='overlay'\n        >\n\n          {/* 'X' button for closing modal */}\n          <button onClick={this.closeModal} className='closeButton'>\n            <i className=\"far fa-window-close\"></i>\n          </button>\n\n          {/* modal content is dynamically determined by the state */}\n          {this.getModalContent()}\n        </ReactModal>\n\n        {/* --- header section --- */}\n        <Header />\n        \n        {/* --- main section --- */}\n        <main>\n          <section className=\"collection wrapper\">\n            <h2>your collection</h2>\n\n            {/* --- tiles for each plant entry are rendered here --- */}\n            <TilesContainer plants={this.state.plants} clickHandler={this.displayPlant} />\n\n            {/* --- 'add a new plant' button --- */}\n            <button className='addPlantButton raisedButton brownButton' onClick={this.startNewEntry}>\n              add a new plant\n            </button>\n          </section>\n        </main>\n\n        {/* --- footer section --- */}\n        <Footer />\n      </div>\n    );\n  }\n}\n \nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}