{"version":3,"sources":["firebase.js","components/Header.js","components/Footer.js","components/PlantForm.js","components/PlantPage.js","components/Tile.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Header","state","className","Component","Footer","PlantForm","props","action","htmlFor","type","name","id","onChange","handleChange","value","inputName","inputNotes","onClick","handleSubmit","PlantPage","plant","plantName","key","plantNotes","handleEdit","handleDelete","Tile","clickHandler","ReactModal","setAppElement","App","event","preventDefault","database","ref","push","handleCloseModal","setState","target","handlePlantSelection","currentPlant","modalType","modalActive","child","remove","handleEditSubmission","update","getModalContent","plants","on","response","newState","data","val","isOpen","this","onRequestClose","overlayClassName","class","map","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7a2af0e4.chunk.js","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/database';\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyCy3hxKMNwgnOKiqNOJB3vT8wi_MS8C5NM\",\n    authDomain: \"sapling-5158c.firebaseapp.com\",\n    databaseURL: \"https://sapling-5158c.firebaseio.com\",\n    projectId: \"sapling-5158c\",\n    storageBucket: \"sapling-5158c.appspot.com\",\n    messagingSenderId: \"207824118415\",\n    appId: \"1:207824118415:web:f0fd5d741514e5d2f506fa\"\n  };\n\n  // Initialize Firebase\n  firebase.initializeApp(firebaseConfig);\n\n  export default firebase;\n","import React, { Component } from 'react';\n\nclass Header extends Component {\n    state = {  }\n    render() { \n        return (\n            <header className='wrapper'>\n                <h1>sapling</h1>\n            </header>\n        );\n    }\n}\n \nexport default Header;","import React, { Component } from 'react';\n\nclass Footer extends Component {\n    state = {  }\n    render() { \n        return (\n            <footer className='wrapper'>\n                <p><span>Made by Evan Wallace</span> <span>at Juno College in 2020.</span></p>\n            </footer>\n        );\n    }\n}\n \nexport default Footer;","import React from 'react';\n\nconst PlantForm = (props) => {\n    return(\n        <form action='submit'>\n            <label htmlFor='inputName'>plant name:</label>\n            <input type='text' name='inputName' id='inputName' onChange={props.handleChange} value={props.inputName} />\n\n            <label htmlFor='inputNotes'>plant notes:</label>\n            <textarea name='inputNotes' id='inputNotes' onChange={props.handleChange} value={props.inputNotes}></textarea>\n\n            {/* form submission button */}\n            <button onClick={props.handleSubmit}>Submit</button>\n        </form>\n    )\n}\n\nexport default PlantForm;","import React, { Component } from 'react';\n\nconst PlantPage = (props) => {\n    const {key, plantName, plantNotes} = props.plant;\n    return(\n        <section className=\"plantPage\">\n            <h3>{plantName}</h3>\n            <p>{plantNotes}</p>\n\n            <div className=\"buttonsContainer\">\n                <button onClick={props.handleEdit} className=\"editButton\">\n                    edit this plant\n                </button>\n\n                <button onClick={props.handleDelete} className=\"deleteButton\">\n                    delete this plant\n                </button>\n            </div>\n\n        </section>\n    )\n}\n\nexport default PlantPage;","import React, { Component } from 'react';\n\nconst Tile = (props) => {\n\n    return(\n        <button onClick={props.clickHandler} className=\"tile\">\n            <p>{props.plantName}</p>\n        </button>\n    )\n}\n\nexport default Tile;","import React, { Component } from 'react';\nimport firebase from './firebase.js';\nimport ReactModal from 'react-modal';\nimport './App.css';\n\n// layout components\nimport Header from './components/Header.js';\nimport Footer from './components/Footer.js';\nimport PlantForm from './components/PlantForm.js';\nimport PlantPage from './components/PlantPage.js';\nimport Tile from './components/Tile.js';\n\n// set root element so react-modal can apply aria-hidden properly\nReactModal.setAppElement('#root');\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      modalActive: false,\n      modalType: '',\n      currentPlant: {\n        plantName: '',\n        plantNotes: '',\n        key: '',\n      },\n      inputName: '',\n      inputNotes: '',\n      plants: [],\n    }\n  }\n\n  componentDidMount() {\n    // connect to firebase\n    const dbRef = firebase.database().ref();\n    dbRef.on('value', (response) => {\n      const newState = [];\n      const data = response.val();\n\n      // index plant information with firebase key\n      for (const key in data) {\n        newState.push({\n          key: key,\n          plantName: data[key].plantName,\n          plantNotes: data[key].plantNotes,\n        });\n      }\n\n      // pass firebase data to App state\n      this.setState({\n        plants: newState,\n      });\n    });\n  }\n\n  handleSubmit = (event) => {\n    // prevent page refresh\n    event.preventDefault();\n\n    // connect to firebase and send user input\n    const dbRef = firebase.database().ref();\n    dbRef.push({\n      plantName: this.state.inputName,\n      plantNotes: this.state.inputNotes,\n    });\n\n    // reset state and close modal\n    this.handleCloseModal();\n  };\n\n  handleChange = (event) => {\n    this.setState ({\n      [event.target.id]: event.target.value,\n    });\n  };\n\n  // when a user clicks a tile, launch a modal with the relevant plant entry\n  handlePlantSelection = (plant) => {\n    this.setState({\n      currentPlant: plant,\n      modalType: 'plantPage',\n      modalActive: true,\n    })\n  }\n\n  // remove an entry from the database\n  handleDelete = (key) => {\n    // connect to firebase and remove entry with provided key\n    const dbRef = firebase.database().ref();\n    dbRef.child(key).remove();\n\n    // reset state and close modal\n    this.handleCloseModal();\n  }\n\n  handleEdit = (plant) => {\n    this.setState({\n      modalType: 'editPlant',\n      inputName: this.state.currentPlant.plantName,\n      inputNotes: this.state.currentPlant.plantNotes,\n    })\n  }\n\n  handleEditSubmission = (key) => {\n    // connect to firebase and update the relevant entry\n    const dbRef = firebase.database().ref();\n    dbRef.child(key).update({\n      plantName: this.state.inputName,\n      plantNotes: this.state.inputNotes,\n    })\n\n    // restore plant page modal\n    this.setState({\n      // update currentPlant with the newest information\n      // TODO: is there a way to do this automatically?\n      currentPlant: {\n        plantName: this.state.inputName,\n        plantNotes: this.state.inputNotes,\n      },\n\n      // reset input fields and display updated plantPage\n      modalType: 'plantPage',\n      inputName: '',\n      inputNotes: '',\n    })\n  }\n\n  // close modal and restore any modified state attributes to default values\n  handleCloseModal = () => {\n    this.setState({\n      modalActive: false,\n      modalType: '',\n      currentPlant: {\n        plantName: '',\n        plantNotes: '',\n        key: '',\n      },\n      inputName: '',\n      inputNotes: '',\n    })\n  }\n\n  // TODO: refactor into smaller functions\n  getModalContent = () => {\n    const { modalType } = this.state;\n    if (modalType === 'newPlant') {\n      return (\n        <PlantForm\n          handleChange={this.handleChange}\n          handleSubmit={this.handleSubmit}\n          plantName={this.state.inputName}\n          plantNotes={this.state.inputNotes}\n        />\n      )\n    } else if (modalType === 'editPlant') {\n      // TODO: handle editing logic; need to write handlers, deal with cancellation, etc\n      const { plantName, plantNotes, key } = this.state.currentPlant;\n      return (\n        <PlantForm\n          handleChange={this.handleChange}\n          handleSubmit={() => this.handleEditSubmission(key)}\n          inputName={this.state.inputName}\n          inputNotes={this.state.inputNotes}\n        />\n      )\n    } else if (modalType === 'plantPage') {\n      return (\n        <PlantPage\n          plant={this.state.currentPlant}\n          handleDelete={() => this.handleDelete(this.state.currentPlant.key)}\n          handleEdit={() => this.handleEdit(this.state.currentPlant)}\n        />\n      )\n    }\n  }\n\n  render() { \n    return (\n      <div className=\"App\">\n        <ReactModal\n          isOpen={this.state.modalActive}\n          onRequestClose={this.handleCloseModal}\n          className='modal'\n          overlayClassName='overlay'\n        >\n          <button onClick={this.handleCloseModal} className='closeButton'>\n            <i class=\"far fa-window-close\"></i>\n          </button>\n          {this.getModalContent()}\n        </ReactModal>\n\n        <Header />\n        \n        <main>\n          <section className=\"collection wrapper\">\n            <h2>your collection</h2>\n\n            <div className='tilesContainer'>\n              {this.state.plants.map((plant) => {\n                return(\n                  <Tile\n                  key={plant.key}\n                  plantName={plant.plantName}\n                  clickHandler={() => this.handlePlantSelection(plant)}\n                  />\n                )\n              })}\n            </div>\n\n            {/* launch form for submitting a new plant */}\n            <button className='addPlantButton' onClick={() => {\n              // TODO: write a proper handler for this button\n              this.setState({\n                modalActive: true,\n                modalType: 'newPlant'\n              })\n            }}>\n              add a plant\n            </button>\n          </section>\n        </main>\n        <Footer />\n      </div>\n    );\n  }\n}\n \nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}